---
- name: Deploy Fitness Booking Application
  hosts: webservers
  become: yes
  vars_files:
    - group_vars/all.yml

  tasks:
    - name: Install required packages
      apt:
        name:
          - docker.io
          - docker-compose
          - python3-pip
          - python3-docker
          - git
          - lsof
        state: present
        update_cache: yes

    - name: Install Docker Python SDK
      pip:
        name:
          - docker
          - docker-compose
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create docker group if it doesn't exist
      group:
        name: docker
        state: present

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Copy docker-compose production file
      copy:
        src: files/docker-compose.prod.yml
        dest: "{{ app_dir }}/docker-compose.yml"
        mode: '0644'

    - name: Stop any running containers
      shell: "docker-compose down -v || true"
      args:
        chdir: "{{ app_dir }}"
      ignore_errors: yes

    - name: Check and kill process using port 5433
      shell: "lsof -ti:5433 | xargs kill -9 || true"
      ignore_errors: yes

    - name: Check and kill process using port 8500
      shell: "lsof -ti:8500 | xargs kill -9 || true"
      ignore_errors: yes

    - name: Check and kill process using port 8100
      shell: "lsof -ti:8100 | xargs kill -9 || true"
      ignore_errors: yes

    - name: Check and kill process using port 6380
      shell: "lsof -ti:6380 | xargs kill -9 || true"
      ignore_errors: yes

    - name: Copy application code
      synchronize:
        src: ../../app/
        dest: "{{ app_dir }}/app/"
        rsync_opts:
          - "--exclude=*.pyc"
          - "--exclude=__pycache__"
          - "--delete"

    - name: Copy nginx configuration
      copy:
        src: files/nginx.conf
        dest: "{{ app_dir }}/nginx.conf"
        mode: '0644'

    - name: Copy environment file
      template:
        src: ".env.j2"
        dest: "{{ app_dir }}/.env"
        mode: '0600'

    - name: Ensure /etc/docker directory exists
      file:
        path: /etc/docker
        state: directory
        mode: '0755'

    - name: Configure Docker daemon
      copy:
        content: |
          {
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "3"
            }
          }
        dest: /etc/docker/daemon.json
        mode: '0644'

    - name: Restart Docker service
      service:
        name: docker
        state: restarted

    - name: Wait for Docker to be ready
      wait_for:
        timeout: 30

    - name: Log into Docker Hub
      shell: "docker login -u {{ docker_hub_username }} -p {{ docker_hub_token }}"
      args:
        executable: /bin/bash

    - name: Pull Docker images
      shell: "cd {{ app_dir }} && docker-compose pull"
      args:
        executable: /bin/bash

    - name: Start Docker containers
      shell: "cd {{ app_dir }} && docker-compose up -d"
      args:
        executable: /bin/bash

    - name: Wait for containers to be ready
      wait_for:
        timeout: 30 